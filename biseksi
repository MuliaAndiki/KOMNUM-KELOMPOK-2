import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import time
import base64

# Fungsi untuk menambahkan gambar latar belakang dari file lokal
def tambahBackground(file_gambar):
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url(data:image/png;base64,{file_gambar});
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }}
        .stTitle {{
            color: white;  /* Warna font putih */
            font-weight: bold;  /* Membuat font tebal */
        }}
        .stTextInput, .stNumberInput {{
            font-weight: bold;  /* Membuat input tebal */
            color: white;  /* Warna font input putih */
        }}
        .stTextInput label, .stNumberInput label {{
            color: white;  /* Warna label input putih */
            font-weight: bold;  /* Membuat label tebal */
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);  /* Bayangan pada label */
        }}
        .stTable {{
            font-weight: bold;  /* Membuat teks tabel tebal */
            color: white;  /* Warna font tabel putih */
            border-color: white;  /* Warna garis tabel putih */
        }}
        .stMarkdown, .stTable th, .stTable td {{
            color: white;  /* Warna teks tabel dan markdown putih */
            font-weight: bold;  /* Membuat teks tabel tebal */
            border: 2px solid white;  /* Membuat garis tabel tebal dan putih */
        }}
        /* Tambahkan efek bayangan pada teks judul */
        h1, h2 {{
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);  /* Bayangan pada judul */
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

# Membaca gambar latar belakang dari file lokal
def tampilanLoadingBackground(image_path):
    with open(image_path, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()  # Encode ke base64

# Path file gambar latar belakang
path_gambar_latar = "background.png"  # Pastikan file ini ada di folder yang sama
# Memuat gambar latar belakang
gambar_latar = tampilanLoadingBackground(path_gambar_latar)
# Menambahkan gambar latar belakang
tambahBackground(gambar_latar)

# Fungsi input manual untuk definisi fungsi
def inputFungsi(input_pengguna):
    return eval("lambda x: " + input_pengguna)

# Metode Bisection
def metodeBiseksi(f, a, b, toleransi, maks_iterasi):
    iterasi_list = []
    for n in range(1, maks_iterasi + 1):
        xr = (a + b) / 2
        f_a = f(a)
        f_b = f(b)
        f_xr = f(xr)
        iterasi = {
            'Iterasi': n,
            'a': a,
            'b': b,
            'F(a)': f_a,
            'F(b)': f_b,
            'xr': xr,
            'F(xr)': f_xr,
            'F(xr)*F(a)': f_xr * f_a,
            '|b-a|': abs(b - a)
        }
        iterasi_list.append(iterasi)
        if abs(f_xr) < toleransi:
            break
        if f_xr * f_a < 0:
            b = xr
        else:
            a = xr
    return iterasi_list

# Fungsi untuk menampilkan grafik
def tampilanGrafik(f):
    x = np.linspace(-10, 10, 400)
    plt.figure(figsize=(8, 6))
    plt.plot(x, f(x), label='f(x)', color='#D81B60')  # Warna grafik
    plt.axhline(y=0, color='red', linestyle='--', label='y=0')
    plt.xlabel('x', color='white')  # Warna label sumbu x
    plt.ylabel('f(x)', color='white')  # Warna label sumbu y
    plt.title('Grafik dari f(x)', color='white')  # Warna judul grafik
    plt.grid(True)
    plt.legend()
    st.pyplot(plt)

# Bagian aplikasi Streamlit
st.markdown("<h1 style='color: white; font-weight: bold;'>Metode Bisection - Kelompok 2</h1>", unsafe_allow_html=True)

# Input pengguna
input_pengguna = st.text_input("Masukkan fungsi f(x):", "")
a = st.number_input("Masukkan nilai a (batas bawah):")
b = st.number_input("Masukkan nilai b (batas atas):")
toleransi = st.number_input("Masukkan nilai toleransi (tol):", format="%.10f")
maks_iterasi = st.number_input("Masukkan nilai maksimum iterasi:", min_value=1, step=1, format="%d")

if st.button("Jalankan Metode Bisection"):
    f = inputFungsi(input_pengguna)  # Konversi input fungsi
    with st.spinner('Sedang memproses...'):
        time.sleep(1)  # Simulasi loading
    # Dapatkan hasil iterasi dari metode Bisection
    hasil_iterasi = metodeBiseksi(f, a, b, toleransi, maks_iterasi)
    # Ubah hasil iterasi menjadi DataFrame agar mudah ditampilkan dalam tabel
    hasil_df = pd.DataFrame(hasil_iterasi)
    # Tampilkan hasil iterasi di luar tabel
    st.markdown("<h2 style='color: white;'>Hasil Iterasi:</h2>", unsafe_allow_html=True)
    tempat_animasi = st.empty()  # Tempat untuk animasi
    for index, row in hasil_df.iterrows():
        tempat_animasi.table(hasil_df.iloc[:index + 1])  # Tampilkan tabel hingga baris saat ini
        time.sleep(0.5)  # Jeda untuk efek animasi
    # Tampilkan grafik fungsi f(x)
    tampilanGrafik(f)
